# malware_detector/scripts/download_samples.py

import os
import requests
import pyzipper
from tqdm import tqdm
import shutil
import time
from requests.exceptions import ChunkedEncodingError, ConnectionError

# === Configuration ===
MALWARE_DIR = "../data/malware"
BENIGN_DIR = "../data/benign"
ZIP_PASSWORD = "infected"
MALWARE_API_URL = "https://mb-api.abuse.ch/api/v1/"

# Add more paths for benign files
BENIGN_PATHS = [
    "C:/Windows/System32",
    "C:/Windows/SysWOW64",
    "C:/Program Files",
    "C:/Program Files (x86)"
]

def setup_dirs():
    """Ensure required directories exist."""
    os.makedirs(MALWARE_DIR, exist_ok=True)
    os.makedirs(BENIGN_DIR, exist_ok=True)

def extract_zip_pyzipper(zip_path, extract_dir, password):
    try:
        with pyzipper.AESZipFile(zip_path) as zf:
            zf.pwd = password.encode()
            zf.extractall(path=extract_dir)
        os.remove(zip_path)
    except Exception as e:
        print(f"[!] Error extracting {os.path.basename(zip_path)}: {e}")

def download_malware_samples(limit=50):
    url = "https://mb-api.abuse.ch/api/v1/"
    data = {"query": "get_taginfo", "tag": "exe"}

    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
        response_json = response.json()
        print("API Response Status:", response_json.get("query_status", "Unknown"))
    except Exception as e:
        print(f"[!] Failed to fetch or parse JSON: {e}")
        return

    if "data" not in response_json:
        print("[!] No sample data found.")
        return

    os.makedirs(MALWARE_DIR, exist_ok=True)

    for sample in tqdm(response_json["data"][:limit], desc="Downloading .exe malware"):
        sha256 = sample.get("sha256_hash")
        if not sha256:
            continue

        # Request sample ZIP file
        dl_data = {"query": "get_file", "sha256_hash": sha256}
        try:
            file_response = requests.post(url, data=dl_data)
            if file_response.status_code != 200:
                print(f"[-] Failed to download {sha256}")
                continue

            zip_path = os.path.join(MALWARE_DIR, f"{sha256}.zip")
            with open(zip_path, "wb") as f:
                f.write(file_response.content)

            # Extract with pyzipper
            try:
                with pyzipper.AESZipFile(zip_path) as zf:
                    zf.pwd = ZIP_PASSWORD.encode()
                    zf.extractall(MALWARE_DIR)
                os.remove(zip_path)
            except Exception as e:
                print(f"[!] Error extracting {sha256}: {e}")

        except Exception as e:
            print(f"[!] Error downloading {sha256}: {e}")
            
def copy_benign_samples(limit=500):
    count = 0
    for base_path in BENIGN_PATHS:
        if not os.path.exists(base_path):
            print(f"[!] Benign source path does not exist: {base_path}")
            continue
        for root, dirs, files in os.walk(base_path):
            for file in files:
                if file.endswith(".exe") and count < limit:
                    src = os.path.join(root, file)
                    dst = os.path.join(BENIGN_DIR, file)
                    try:
                        shutil.copy2(src, dst)
                        count += 1
                    except Exception as e:
                        print(f"[!] Failed to copy {file}: {e}")
                if count >= limit:
                    return

if __name__ == "__main__":
    setup_dirs()
    download_malware_samples(limit=500)  # Increased limit
    copy_benign_samples(limit=500)       # Increased limit

    print("\n? Samples ready!")
    print(f"- Malware samples in: {MALWARE_DIR}")
    print(f"- Benign samples in:  {BENIGN_DIR}")

